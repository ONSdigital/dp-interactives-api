// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-interactives-api/api"
	"net/http"
	"sync"
)

// Ensure, that AuthHandlerMock does implement api.AuthHandler.
// If this is not the case, regenerate this file with moq.
var _ api.AuthHandler = &AuthHandlerMock{}

// AuthHandlerMock is a mock implementation of api.AuthHandler.
//
// 	func TestSomethingThatUsesAuthHandler(t *testing.T) {
//
// 		// make and configure a mocked api.AuthHandler
// 		mockedAuthHandler := &AuthHandlerMock{
// 			RequireFunc: func(permission string, handler http.HandlerFunc) http.HandlerFunc {
// 				panic("mock out the Require method")
// 			},
// 		}
//
// 		// use mockedAuthHandler in code that requires api.AuthHandler
// 		// and then make assertions.
//
// 	}
type AuthHandlerMock struct {
	// RequireFunc mocks the Require method.
	RequireFunc func(permission string, handler http.HandlerFunc) http.HandlerFunc

	// calls tracks calls to the methods.
	calls struct {
		// Require holds details about calls to the Require method.
		Require []struct {
			// Permission is the permission argument value.
			Permission string
			// Handler is the handler argument value.
			Handler http.HandlerFunc
		}
	}
	lockRequire sync.RWMutex
}

// Require calls RequireFunc.
func (mock *AuthHandlerMock) Require(permission string, handler http.HandlerFunc) http.HandlerFunc {
	if mock.RequireFunc == nil {
		panic("AuthHandlerMock.RequireFunc: method is nil but AuthHandler.Require was just called")
	}
	callInfo := struct {
		Permission string
		Handler    http.HandlerFunc
	}{
		Permission: permission,
		Handler:    handler,
	}
	mock.lockRequire.Lock()
	mock.calls.Require = append(mock.calls.Require, callInfo)
	mock.lockRequire.Unlock()
	return mock.RequireFunc(permission, handler)
}

// RequireCalls gets all the calls that were made to Require.
// Check the length with:
//     len(mockedAuthHandler.RequireCalls())
func (mock *AuthHandlerMock) RequireCalls() []struct {
	Permission string
	Handler    http.HandlerFunc
} {
	var calls []struct {
		Permission string
		Handler    http.HandlerFunc
	}
	mock.lockRequire.RLock()
	calls = mock.calls.Require
	mock.lockRequire.RUnlock()
	return calls
}
