// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-interactives-api/api"
	"github.com/ONSdigital/dp-interactives-api/models"
	"sync"
)

// Ensure, that MongoServerMock does implement api.MongoServer.
// If this is not the case, regenerate this file with moq.
var _ api.MongoServer = &MongoServerMock{}

// MongoServerMock is a mock implementation of api.MongoServer.
//
// 	func TestSomethingThatUsesMongoServer(t *testing.T) {
//
// 		// make and configure a mocked api.MongoServer
// 		mockedMongoServer := &MongoServerMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			GetActiveInteractiveGivenShaFunc: func(ctx context.Context, sha string) (*models.Interactive, error) {
// 				panic("mock out the GetActiveInteractiveGivenSha method")
// 			},
// 			GetActiveInteractiveGivenTitleFunc: func(ctx context.Context, title string) (*models.Interactive, error) {
// 				panic("mock out the GetActiveInteractiveGivenTitle method")
// 			},
// 			GetInteractiveFunc: func(ctx context.Context, id string) (*models.Interactive, error) {
// 				panic("mock out the GetInteractive method")
// 			},
// 			ListInteractivesFunc: func(ctx context.Context, offset int, limit int) (interface{}, int, error) {
// 				panic("mock out the ListInteractives method")
// 			},
// 			UpsertInteractiveFunc: func(ctx context.Context, id string, vis *models.Interactive) error {
// 				panic("mock out the UpsertInteractive method")
// 			},
// 		}
//
// 		// use mockedMongoServer in code that requires api.MongoServer
// 		// and then make assertions.
//
// 	}
type MongoServerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetActiveInteractiveGivenShaFunc mocks the GetActiveInteractiveGivenSha method.
	GetActiveInteractiveGivenShaFunc func(ctx context.Context, sha string) (*models.Interactive, error)

	// GetActiveInteractiveGivenTitleFunc mocks the GetActiveInteractiveGivenTitle method.
	GetActiveInteractiveGivenTitleFunc func(ctx context.Context, title string) (*models.Interactive, error)

	// GetInteractiveFunc mocks the GetInteractive method.
	GetInteractiveFunc func(ctx context.Context, id string) (*models.Interactive, error)

	// ListInteractivesFunc mocks the ListInteractives method.
	ListInteractivesFunc func(ctx context.Context, offset int, limit int) (interface{}, int, error)

	// UpsertInteractiveFunc mocks the UpsertInteractive method.
	UpsertInteractiveFunc func(ctx context.Context, id string, vis *models.Interactive) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetActiveInteractiveGivenSha holds details about calls to the GetActiveInteractiveGivenSha method.
		GetActiveInteractiveGivenSha []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sha is the sha argument value.
			Sha string
		}
		// GetActiveInteractiveGivenTitle holds details about calls to the GetActiveInteractiveGivenTitle method.
		GetActiveInteractiveGivenTitle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
		}
		// GetInteractive holds details about calls to the GetInteractive method.
		GetInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListInteractives holds details about calls to the ListInteractives method.
		ListInteractives []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// UpsertInteractive holds details about calls to the UpsertInteractive method.
		UpsertInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Vis is the vis argument value.
			Vis *models.Interactive
		}
	}
	lockChecker                        sync.RWMutex
	lockClose                          sync.RWMutex
	lockGetActiveInteractiveGivenSha   sync.RWMutex
	lockGetActiveInteractiveGivenTitle sync.RWMutex
	lockGetInteractive                 sync.RWMutex
	lockListInteractives               sync.RWMutex
	lockUpsertInteractive              sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *MongoServerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoServerMock.CheckerFunc: method is nil but MongoServer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoServer.CheckerCalls())
func (mock *MongoServerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoServerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoServerMock.CloseFunc: method is nil but MongoServer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoServer.CloseCalls())
func (mock *MongoServerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetActiveInteractiveGivenSha calls GetActiveInteractiveGivenShaFunc.
func (mock *MongoServerMock) GetActiveInteractiveGivenSha(ctx context.Context, sha string) (*models.Interactive, error) {
	if mock.GetActiveInteractiveGivenShaFunc == nil {
		panic("MongoServerMock.GetActiveInteractiveGivenShaFunc: method is nil but MongoServer.GetActiveInteractiveGivenSha was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sha string
	}{
		Ctx: ctx,
		Sha: sha,
	}
	mock.lockGetActiveInteractiveGivenSha.Lock()
	mock.calls.GetActiveInteractiveGivenSha = append(mock.calls.GetActiveInteractiveGivenSha, callInfo)
	mock.lockGetActiveInteractiveGivenSha.Unlock()
	return mock.GetActiveInteractiveGivenShaFunc(ctx, sha)
}

// GetActiveInteractiveGivenShaCalls gets all the calls that were made to GetActiveInteractiveGivenSha.
// Check the length with:
//     len(mockedMongoServer.GetActiveInteractiveGivenShaCalls())
func (mock *MongoServerMock) GetActiveInteractiveGivenShaCalls() []struct {
	Ctx context.Context
	Sha string
} {
	var calls []struct {
		Ctx context.Context
		Sha string
	}
	mock.lockGetActiveInteractiveGivenSha.RLock()
	calls = mock.calls.GetActiveInteractiveGivenSha
	mock.lockGetActiveInteractiveGivenSha.RUnlock()
	return calls
}

// GetActiveInteractiveGivenTitle calls GetActiveInteractiveGivenTitleFunc.
func (mock *MongoServerMock) GetActiveInteractiveGivenTitle(ctx context.Context, title string) (*models.Interactive, error) {
	if mock.GetActiveInteractiveGivenTitleFunc == nil {
		panic("MongoServerMock.GetActiveInteractiveGivenTitleFunc: method is nil but MongoServer.GetActiveInteractiveGivenTitle was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
	}{
		Ctx:   ctx,
		Title: title,
	}
	mock.lockGetActiveInteractiveGivenTitle.Lock()
	mock.calls.GetActiveInteractiveGivenTitle = append(mock.calls.GetActiveInteractiveGivenTitle, callInfo)
	mock.lockGetActiveInteractiveGivenTitle.Unlock()
	return mock.GetActiveInteractiveGivenTitleFunc(ctx, title)
}

// GetActiveInteractiveGivenTitleCalls gets all the calls that were made to GetActiveInteractiveGivenTitle.
// Check the length with:
//     len(mockedMongoServer.GetActiveInteractiveGivenTitleCalls())
func (mock *MongoServerMock) GetActiveInteractiveGivenTitleCalls() []struct {
	Ctx   context.Context
	Title string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
	}
	mock.lockGetActiveInteractiveGivenTitle.RLock()
	calls = mock.calls.GetActiveInteractiveGivenTitle
	mock.lockGetActiveInteractiveGivenTitle.RUnlock()
	return calls
}

// GetInteractive calls GetInteractiveFunc.
func (mock *MongoServerMock) GetInteractive(ctx context.Context, id string) (*models.Interactive, error) {
	if mock.GetInteractiveFunc == nil {
		panic("MongoServerMock.GetInteractiveFunc: method is nil but MongoServer.GetInteractive was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetInteractive.Lock()
	mock.calls.GetInteractive = append(mock.calls.GetInteractive, callInfo)
	mock.lockGetInteractive.Unlock()
	return mock.GetInteractiveFunc(ctx, id)
}

// GetInteractiveCalls gets all the calls that were made to GetInteractive.
// Check the length with:
//     len(mockedMongoServer.GetInteractiveCalls())
func (mock *MongoServerMock) GetInteractiveCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetInteractive.RLock()
	calls = mock.calls.GetInteractive
	mock.lockGetInteractive.RUnlock()
	return calls
}

// ListInteractives calls ListInteractivesFunc.
func (mock *MongoServerMock) ListInteractives(ctx context.Context, offset int, limit int) (interface{}, int, error) {
	if mock.ListInteractivesFunc == nil {
		panic("MongoServerMock.ListInteractivesFunc: method is nil but MongoServer.ListInteractives was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockListInteractives.Lock()
	mock.calls.ListInteractives = append(mock.calls.ListInteractives, callInfo)
	mock.lockListInteractives.Unlock()
	return mock.ListInteractivesFunc(ctx, offset, limit)
}

// ListInteractivesCalls gets all the calls that were made to ListInteractives.
// Check the length with:
//     len(mockedMongoServer.ListInteractivesCalls())
func (mock *MongoServerMock) ListInteractivesCalls() []struct {
	Ctx    context.Context
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}
	mock.lockListInteractives.RLock()
	calls = mock.calls.ListInteractives
	mock.lockListInteractives.RUnlock()
	return calls
}

// UpsertInteractive calls UpsertInteractiveFunc.
func (mock *MongoServerMock) UpsertInteractive(ctx context.Context, id string, vis *models.Interactive) error {
	if mock.UpsertInteractiveFunc == nil {
		panic("MongoServerMock.UpsertInteractiveFunc: method is nil but MongoServer.UpsertInteractive was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}{
		Ctx: ctx,
		ID:  id,
		Vis: vis,
	}
	mock.lockUpsertInteractive.Lock()
	mock.calls.UpsertInteractive = append(mock.calls.UpsertInteractive, callInfo)
	mock.lockUpsertInteractive.Unlock()
	return mock.UpsertInteractiveFunc(ctx, id, vis)
}

// UpsertInteractiveCalls gets all the calls that were made to UpsertInteractive.
// Check the length with:
//     len(mockedMongoServer.UpsertInteractiveCalls())
func (mock *MongoServerMock) UpsertInteractiveCalls() []struct {
	Ctx context.Context
	ID  string
	Vis *models.Interactive
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}
	mock.lockUpsertInteractive.RLock()
	calls = mock.calls.UpsertInteractive
	mock.lockUpsertInteractive.RUnlock()
	return calls
}
