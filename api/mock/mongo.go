// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/interactives"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-interactives-api/api"
	"github.com/ONSdigital/dp-interactives-api/models"
	"sync"
)

// Ensure, that MongoServerMock does implement api.MongoServer.
// If this is not the case, regenerate this file with moq.
var _ api.MongoServer = &MongoServerMock{}

// MongoServerMock is a mock implementation of api.MongoServer.
//
// 	func TestSomethingThatUsesMongoServer(t *testing.T) {
//
// 		// make and configure a mocked api.MongoServer
// 		mockedMongoServer := &MongoServerMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			GetInteractiveFunc: func(ctx context.Context, id string) (*models.Interactive, error) {
// 				panic("mock out the GetInteractive method")
// 			},
// 			ListArchiveFilesFunc: func(ctx context.Context, interactiveId string) ([]*models.ArchiveFile, error) {
// 				panic("mock out the ListArchiveFiles method")
// 			},
// 			ListInteractivesFunc: func(ctx context.Context, filter *models.Filter) ([]*models.Interactive, error) {
// 				panic("mock out the ListInteractives method")
// 			},
// 			PatchInteractiveFunc: func(contextMoqParam context.Context, patchAttribute interactives.PatchAttribute, interactive *models.Interactive) error {
// 				panic("mock out the PatchInteractive method")
// 			},
// 			UpsertArchiveFileFunc: func(ctx context.Context, file *models.ArchiveFile) error {
// 				panic("mock out the UpsertArchiveFile method")
// 			},
// 			UpsertInteractiveFunc: func(ctx context.Context, id string, vis *models.Interactive) error {
// 				panic("mock out the UpsertInteractive method")
// 			},
// 		}
//
// 		// use mockedMongoServer in code that requires api.MongoServer
// 		// and then make assertions.
//
// 	}
type MongoServerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetInteractiveFunc mocks the GetInteractive method.
	GetInteractiveFunc func(ctx context.Context, id string) (*models.Interactive, error)

	// ListArchiveFilesFunc mocks the ListArchiveFiles method.
	ListArchiveFilesFunc func(ctx context.Context, interactiveId string) ([]*models.ArchiveFile, error)

	// ListInteractivesFunc mocks the ListInteractives method.
	ListInteractivesFunc func(ctx context.Context, filter *models.Filter) ([]*models.Interactive, error)

	// PatchInteractiveFunc mocks the PatchInteractive method.
	PatchInteractiveFunc func(contextMoqParam context.Context, patchAttribute interactives.PatchAttribute, interactive *models.Interactive) error

	// UpsertArchiveFileFunc mocks the UpsertArchiveFile method.
	UpsertArchiveFileFunc func(ctx context.Context, file *models.ArchiveFile) error

	// UpsertInteractiveFunc mocks the UpsertInteractive method.
	UpsertInteractiveFunc func(ctx context.Context, id string, vis *models.Interactive) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetInteractive holds details about calls to the GetInteractive method.
		GetInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListArchiveFiles holds details about calls to the ListArchiveFiles method.
		ListArchiveFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InteractiveId is the interactiveId argument value.
			InteractiveId string
		}
		// ListInteractives holds details about calls to the ListInteractives method.
		ListInteractives []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *models.Filter
		}
		// PatchInteractive holds details about calls to the PatchInteractive method.
		PatchInteractive []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PatchAttribute is the patchAttribute argument value.
			PatchAttribute interactives.PatchAttribute
			// Interactive is the interactive argument value.
			Interactive *models.Interactive
		}
		// UpsertArchiveFile holds details about calls to the UpsertArchiveFile method.
		UpsertArchiveFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// File is the file argument value.
			File *models.ArchiveFile
		}
		// UpsertInteractive holds details about calls to the UpsertInteractive method.
		UpsertInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Vis is the vis argument value.
			Vis *models.Interactive
		}
	}
	lockChecker           sync.RWMutex
	lockClose             sync.RWMutex
	lockGetInteractive    sync.RWMutex
	lockListArchiveFiles  sync.RWMutex
	lockListInteractives  sync.RWMutex
	lockPatchInteractive  sync.RWMutex
	lockUpsertArchiveFile sync.RWMutex
	lockUpsertInteractive sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *MongoServerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoServerMock.CheckerFunc: method is nil but MongoServer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoServer.CheckerCalls())
func (mock *MongoServerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoServerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoServerMock.CloseFunc: method is nil but MongoServer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoServer.CloseCalls())
func (mock *MongoServerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetInteractive calls GetInteractiveFunc.
func (mock *MongoServerMock) GetInteractive(ctx context.Context, id string) (*models.Interactive, error) {
	if mock.GetInteractiveFunc == nil {
		panic("MongoServerMock.GetInteractiveFunc: method is nil but MongoServer.GetInteractive was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetInteractive.Lock()
	mock.calls.GetInteractive = append(mock.calls.GetInteractive, callInfo)
	mock.lockGetInteractive.Unlock()
	return mock.GetInteractiveFunc(ctx, id)
}

// GetInteractiveCalls gets all the calls that were made to GetInteractive.
// Check the length with:
//     len(mockedMongoServer.GetInteractiveCalls())
func (mock *MongoServerMock) GetInteractiveCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetInteractive.RLock()
	calls = mock.calls.GetInteractive
	mock.lockGetInteractive.RUnlock()
	return calls
}

// ListArchiveFiles calls ListArchiveFilesFunc.
func (mock *MongoServerMock) ListArchiveFiles(ctx context.Context, interactiveId string) ([]*models.ArchiveFile, error) {
	if mock.ListArchiveFilesFunc == nil {
		panic("MongoServerMock.ListArchiveFilesFunc: method is nil but MongoServer.ListArchiveFiles was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		InteractiveId string
	}{
		Ctx:           ctx,
		InteractiveId: interactiveId,
	}
	mock.lockListArchiveFiles.Lock()
	mock.calls.ListArchiveFiles = append(mock.calls.ListArchiveFiles, callInfo)
	mock.lockListArchiveFiles.Unlock()
	return mock.ListArchiveFilesFunc(ctx, interactiveId)
}

// ListArchiveFilesCalls gets all the calls that were made to ListArchiveFiles.
// Check the length with:
//     len(mockedMongoServer.ListArchiveFilesCalls())
func (mock *MongoServerMock) ListArchiveFilesCalls() []struct {
	Ctx           context.Context
	InteractiveId string
} {
	var calls []struct {
		Ctx           context.Context
		InteractiveId string
	}
	mock.lockListArchiveFiles.RLock()
	calls = mock.calls.ListArchiveFiles
	mock.lockListArchiveFiles.RUnlock()
	return calls
}

// ListInteractives calls ListInteractivesFunc.
func (mock *MongoServerMock) ListInteractives(ctx context.Context, filter *models.Filter) ([]*models.Interactive, error) {
	if mock.ListInteractivesFunc == nil {
		panic("MongoServerMock.ListInteractivesFunc: method is nil but MongoServer.ListInteractives was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *models.Filter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockListInteractives.Lock()
	mock.calls.ListInteractives = append(mock.calls.ListInteractives, callInfo)
	mock.lockListInteractives.Unlock()
	return mock.ListInteractivesFunc(ctx, filter)
}

// ListInteractivesCalls gets all the calls that were made to ListInteractives.
// Check the length with:
//     len(mockedMongoServer.ListInteractivesCalls())
func (mock *MongoServerMock) ListInteractivesCalls() []struct {
	Ctx    context.Context
	Filter *models.Filter
} {
	var calls []struct {
		Ctx    context.Context
		Filter *models.Filter
	}
	mock.lockListInteractives.RLock()
	calls = mock.calls.ListInteractives
	mock.lockListInteractives.RUnlock()
	return calls
}

// PatchInteractive calls PatchInteractiveFunc.
func (mock *MongoServerMock) PatchInteractive(contextMoqParam context.Context, patchAttribute interactives.PatchAttribute, interactive *models.Interactive) error {
	if mock.PatchInteractiveFunc == nil {
		panic("MongoServerMock.PatchInteractiveFunc: method is nil but MongoServer.PatchInteractive was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		PatchAttribute  interactives.PatchAttribute
		Interactive     *models.Interactive
	}{
		ContextMoqParam: contextMoqParam,
		PatchAttribute:  patchAttribute,
		Interactive:     interactive,
	}
	mock.lockPatchInteractive.Lock()
	mock.calls.PatchInteractive = append(mock.calls.PatchInteractive, callInfo)
	mock.lockPatchInteractive.Unlock()
	return mock.PatchInteractiveFunc(contextMoqParam, patchAttribute, interactive)
}

// PatchInteractiveCalls gets all the calls that were made to PatchInteractive.
// Check the length with:
//     len(mockedMongoServer.PatchInteractiveCalls())
func (mock *MongoServerMock) PatchInteractiveCalls() []struct {
	ContextMoqParam context.Context
	PatchAttribute  interactives.PatchAttribute
	Interactive     *models.Interactive
} {
	var calls []struct {
		ContextMoqParam context.Context
		PatchAttribute  interactives.PatchAttribute
		Interactive     *models.Interactive
	}
	mock.lockPatchInteractive.RLock()
	calls = mock.calls.PatchInteractive
	mock.lockPatchInteractive.RUnlock()
	return calls
}

// UpsertArchiveFile calls UpsertArchiveFileFunc.
func (mock *MongoServerMock) UpsertArchiveFile(ctx context.Context, file *models.ArchiveFile) error {
	if mock.UpsertArchiveFileFunc == nil {
		panic("MongoServerMock.UpsertArchiveFileFunc: method is nil but MongoServer.UpsertArchiveFile was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		File *models.ArchiveFile
	}{
		Ctx:  ctx,
		File: file,
	}
	mock.lockUpsertArchiveFile.Lock()
	mock.calls.UpsertArchiveFile = append(mock.calls.UpsertArchiveFile, callInfo)
	mock.lockUpsertArchiveFile.Unlock()
	return mock.UpsertArchiveFileFunc(ctx, file)
}

// UpsertArchiveFileCalls gets all the calls that were made to UpsertArchiveFile.
// Check the length with:
//     len(mockedMongoServer.UpsertArchiveFileCalls())
func (mock *MongoServerMock) UpsertArchiveFileCalls() []struct {
	Ctx  context.Context
	File *models.ArchiveFile
} {
	var calls []struct {
		Ctx  context.Context
		File *models.ArchiveFile
	}
	mock.lockUpsertArchiveFile.RLock()
	calls = mock.calls.UpsertArchiveFile
	mock.lockUpsertArchiveFile.RUnlock()
	return calls
}

// UpsertInteractive calls UpsertInteractiveFunc.
func (mock *MongoServerMock) UpsertInteractive(ctx context.Context, id string, vis *models.Interactive) error {
	if mock.UpsertInteractiveFunc == nil {
		panic("MongoServerMock.UpsertInteractiveFunc: method is nil but MongoServer.UpsertInteractive was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}{
		Ctx: ctx,
		ID:  id,
		Vis: vis,
	}
	mock.lockUpsertInteractive.Lock()
	mock.calls.UpsertInteractive = append(mock.calls.UpsertInteractive, callInfo)
	mock.lockUpsertInteractive.Unlock()
	return mock.UpsertInteractiveFunc(ctx, id, vis)
}

// UpsertInteractiveCalls gets all the calls that were made to UpsertInteractive.
// Check the length with:
//     len(mockedMongoServer.UpsertInteractiveCalls())
func (mock *MongoServerMock) UpsertInteractiveCalls() []struct {
	Ctx context.Context
	ID  string
	Vis *models.Interactive
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}
	mock.lockUpsertInteractive.RLock()
	calls = mock.calls.UpsertInteractive
	mock.lockUpsertInteractive.RUnlock()
	return calls
}
