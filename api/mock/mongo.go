// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-interactives-api/api"
	"github.com/ONSdigital/dp-interactives-api/models"
	"sync"
)

// Ensure, that MongoServerMock does implement api.MongoServer.
// If this is not the case, regenerate this file with moq.
var _ api.MongoServer = &MongoServerMock{}

// MongoServerMock is a mock implementation of api.MongoServer.
//
// 	func TestSomethingThatUsesMongoServer(t *testing.T) {
//
// 		// make and configure a mocked api.MongoServer
// 		mockedMongoServer := &MongoServerMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			GetInteractiveFromSHAFunc: func(ctx context.Context, sha string) (*models.Interactive, error) {
// 				panic("mock out the GetInteractiveFromSHA method")
// 			},
// 			UpsertInteractiveFunc: func(ctx context.Context, id string, vis *models.Interactive) error {
// 				panic("mock out the UpsertInteractive method")
// 			},
// 		}
//
// 		// use mockedMongoServer in code that requires api.MongoServer
// 		// and then make assertions.
//
// 	}
type MongoServerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetInteractiveFromSHAFunc mocks the GetInteractiveFromSHA method.
	GetInteractiveFromSHAFunc func(ctx context.Context, sha string) (*models.Interactive, error)

	// UpsertInteractiveFunc mocks the UpsertInteractive method.
	UpsertInteractiveFunc func(ctx context.Context, id string, vis *models.Interactive) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetInteractiveFromSHA holds details about calls to the GetInteractiveFromSHA method.
		GetInteractiveFromSHA []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sha is the sha argument value.
			Sha string
		}
		// UpsertInteractive holds details about calls to the UpsertInteractive method.
		UpsertInteractive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Vis is the vis argument value.
			Vis *models.Interactive
		}
	}
	lockChecker               sync.RWMutex
	lockClose                 sync.RWMutex
	lockGetInteractiveFromSHA sync.RWMutex
	lockUpsertInteractive     sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *MongoServerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoServerMock.CheckerFunc: method is nil but MongoServer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoServer.CheckerCalls())
func (mock *MongoServerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoServerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoServerMock.CloseFunc: method is nil but MongoServer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoServer.CloseCalls())
func (mock *MongoServerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetInteractiveFromSHA calls GetInteractiveFromSHAFunc.
func (mock *MongoServerMock) GetInteractiveFromSHA(ctx context.Context, sha string) (*models.Interactive, error) {
	if mock.GetInteractiveFromSHAFunc == nil {
		panic("MongoServerMock.GetInteractiveFromSHAFunc: method is nil but MongoServer.GetInteractiveFromSHA was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sha string
	}{
		Ctx: ctx,
		Sha: sha,
	}
	mock.lockGetInteractiveFromSHA.Lock()
	mock.calls.GetInteractiveFromSHA = append(mock.calls.GetInteractiveFromSHA, callInfo)
	mock.lockGetInteractiveFromSHA.Unlock()
	return mock.GetInteractiveFromSHAFunc(ctx, sha)
}

// GetInteractiveFromSHACalls gets all the calls that were made to GetInteractiveFromSHA.
// Check the length with:
//     len(mockedMongoServer.GetInteractiveFromSHACalls())
func (mock *MongoServerMock) GetInteractiveFromSHACalls() []struct {
	Ctx context.Context
	Sha string
} {
	var calls []struct {
		Ctx context.Context
		Sha string
	}
	mock.lockGetInteractiveFromSHA.RLock()
	calls = mock.calls.GetInteractiveFromSHA
	mock.lockGetInteractiveFromSHA.RUnlock()
	return calls
}

// UpsertInteractive calls UpsertInteractiveFunc.
func (mock *MongoServerMock) UpsertInteractive(ctx context.Context, id string, vis *models.Interactive) error {
	if mock.UpsertInteractiveFunc == nil {
		panic("MongoServerMock.UpsertInteractiveFunc: method is nil but MongoServer.UpsertInteractive was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}{
		Ctx: ctx,
		ID:  id,
		Vis: vis,
	}
	mock.lockUpsertInteractive.Lock()
	mock.calls.UpsertInteractive = append(mock.calls.UpsertInteractive, callInfo)
	mock.lockUpsertInteractive.Unlock()
	return mock.UpsertInteractiveFunc(ctx, id, vis)
}

// UpsertInteractiveCalls gets all the calls that were made to UpsertInteractive.
// Check the length with:
//     len(mockedMongoServer.UpsertInteractiveCalls())
func (mock *MongoServerMock) UpsertInteractiveCalls() []struct {
	Ctx context.Context
	ID  string
	Vis *models.Interactive
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Vis *models.Interactive
	}
	mock.lockUpsertInteractive.RLock()
	calls = mock.calls.UpsertInteractive
	mock.lockUpsertInteractive.RUnlock()
	return calls
}
